==============================
Progete OWL Tutorial
==============================

Exercise 1
------------------------------
	1. Do this.
	2. Then do this.
	3. Then do this.

Exercise 2: Create a new OWL Ontology
------------------------------
	1. Start Protege.
	2. Welcome dialog box --> Create new OWL ontology
	3. Ontology ID --> Ontology IRI --> Replace the default URL with "http://www.pizza.com/ontologies/pizza.owl"
	4. browse the physical location, name the file 'pizza.owl' --> Continue
	5. Ontology format is 'RDF/XML' --> Finish

Exercise 3: Add a comment to the ontology
------------------------------
	1. Select the 'Active Ontology' Tab
	2. 'Ontology Annotations' --> Annotations 'Add'(+)
	3. Select the 'Comment' from the list
	4. Enter a comment in the 'Value' box

Exercise 4: Create classes
------------------------------
	1. Ensure the 'Classes' Tab is selected
	2. Select 'Thing' --> Add subclass
	3. Enter a class name --> Pizza --> OK
	4. Select 'Pizza' --> Add sibling class
	5. Enter a class name --> PizzaTopping --> OK
	6. Repeat 4&5, whose class name is PizzaBase

Exercise 5: Make classes disjoint from each other
------------------------------
	1. Select 'Pizza'
	2. Press 'Disjoint classes' (+), which will bring up a dialog
	3. Select multiple classes to be disjoint

Exercise 6&7: Use the 'Create Class Hierarchy' Tool to Create sub-classes
------------------------------
	1. Select PizzaBase in the class hierarchy
	2. Tools menu --> Create class hierarchy...
	3. Suffix: Base
	4. In the large text area, type 'DeepPan' (hit return) 'ThinAndCrispy'
	5. Continue --> Ensure 'Make sibling classes disjoint' ticked
	6. Press 'Finish'
	7. Repeat 3-6, whose Suffix is Topping.

Exercise 8: Create an object property
------------------------------
	1. Switch to the 'Object Properties' Tab
	2. Select 'topObjectProperty' --> Add sub property
	3. Name the property to 'hasIngredient' using the 'Property Name Dialog' that pops up.

Exercise 9: Create sub-properties
------------------------------
	1. Select 'hasIngredient' property in the Object property hierarchy
	2. Press 'Add sub property' and name the sub-property
	3. to create two sub-properties, hasTopping and hasBase

Exercise 10: Create inverse properties
------------------------------
	1. Create 'isIngredient' property
	2. Press 'Inverse properties'(+) on 'Description' view, which will pop up a dialog
	3. Select 'hasIngredient' and Press OK
	4. Create sub-properties of isIngredient, isBaseOf and isToppingOf
	5. Make these sub-properties inverse

Exercise 11: Make the property 'hasIngredient' transitive
------------------------------
	1. Select 'hasIngredient' on the 'Object property hierarchy' Tab
	2. Tick 'Transitive' tick box on the 'Property Characteristics' Tab
	3. Select 'isIngredientOf', which is inverse of 'hasIngredient', and ensure that the transitive tick box is ticked. It won't auto do it.

Exercise 12: Make the property 'hasBase' functional
------------------------------
	1. Select 'hasBase'
	2. Tick 'Functional' tick box

Exercise 13&14: Specify the domain and range for the property 'hasTopping'
------------------------------
	1. Select hasTopping
	2. In the view of Object Properties Description
	3. Press Add(+)
	4. The domain of 'hasTopping' is 'Pizza', while the range of 'hasTopping' is 'PizzaTopping'
	5*. Progete did not fill in domain and range of the inverse property of 'hasTopping', which is 'isToppingOf'. So fill them in manually.

Exercise 15: Specify the domain and range for the property 'hasBase', as well as its inverse property 'isBaseOf'
------------------------------
	Just like ex.13&14
	!* Although we have specified the domains and ranges of various properties for the purposes of this tutorial, we generally advise against doing this. The fact that domain and range conditions do not behave as constraints and the fact that they can cause ‘unexpected’ classification results can lead problems and unexpected side effects. These problems and side effects can be particularly difficult to track down in a large ontology.

Exercise 16&17: Add a restriction: a Pizza must have a PizzaBase
------------------------------
	1. Select 'Pizza' from the class hierarchy on the 'Classes' Tab
	2. Click 'Superclasses' (+) in the Description view
	3. Switch to the 'Class expression editor' Tab
	4. Type or 'drag and drop'
	5. "hasBase some PizzaBase", I did not find it auto-completed.

Exercise 18: Create a subclass of Pizza called NamedPizza
------------------------------
	1. Select Pizza from the class hierarchy on the Classes Tab
	2. Create a new subclass of Pizza, and name it NamedPizza
	3. Create a new subclass of NamedPizza, and name it MargheritaPizza
	4. Add a comment to the class MargheritaPizza: A pizza that only has Mozarella and Tomato toppings

Exercise 19&20: Create existential (some) restrictions on MargheritaPizza that acts along the property 'hasTopping' with a filler of MozzarellaTopping & TomatoTopping to specify that a MargheritaPizza has at least one MozzarellaTopping and at least one TomatoTopping.
------------------------------
	No tutorial this time.

Exercise 21: Create 'AmericanaPizza' by cloning and modifying the description of 'MargheritaPizza'
------------------------------
	1. Select 'MargheritaPizza'
	2. Menu --> Edit --> Duplicate --> name it 'AmericanaPizza' --> OK
	3. Select 'AmericanaPizza'
	4. Add a restriction that 'hasTopping some PepperoniTopping'

Exercise 22: Create an AmericanHotPizza and a SohoPizza
------------------------------
	1. AmericanHotPizza is AmericanaPizza plus JalapenoPepperTopping on it.
	2. SohoPizza is MargheritaPizza with additional toppings of Olive and Parmezan cheese.

Exercise 23: Make subclass of NamedPizza disjoint from each other
------------------------------
	1. Select MargheritaPizza
	2. Menu --> Edit --> Make primitive siblings disjoint

Exercise 24: ProbeInconsistentTopping, a subclass of both CheeseTopping and VegerableTopping
------------------------------
	1. Create a subclass of CheeseTopping named ProbeInconsistentTopping and comment it that this class should be inconsistent when the ontology is classified.
	2. Ensure ProbeInconsistentTopping is selected, add its superclass, VegetableTopping
	3. ProbeInconsistentTopping now is highlighted in red (Actually not)
	4. The thing is to Start reasoner from Reasoner on Menu bar.

Exercise 25&26: Find the problem and Remove the disjoint statement between CheeseTopping and VegetableTopping (to see what happens)
------------------------------
	1. Select Probe --> Description --> Equivalent classes --> Nothing (?)
	2. A box pops up.
	3. Select CheeseTopping --> Disjoint classes --> Edit --> remove 'vegetable'
	4. Reasoner --> Synchronize reasoner

Exercise 27&28: Fix the ontology to the origin, and Create a sub class of Pizza called CheesyPizza that has at least one topping that is CheeseTopping.

Exericse 29: Convert the necessary conditions into necessary & sufficient conditions
------------------------------
	1. Select 'CheesyPizza'
	2. Menu --> Edit --> Convert to defined class

Exercise 30: Automated compute the subclass of CheesyPizza
------------------------------
	Due to the fact that all of the individuals that are described by the classes ... are Pizza and they have at least one topping of CheeseTopping or the subclasses of CheeseTopping.
	This work is automated computed by a reasoner, so make sure a reasoner has been started.
	The result can be found from the 'Class hierarchy (inferred)' Tab, which is next to the 'Class hierarchy' Tab.

Exercise 31: Create a class to describe a 'VegetarianPizza'
------------------------------
	1. Create a subclass of Pizza, and name it 'VegetarianPizza'
	2. Give 'VegetarianPizza' a necessary condition that is 'hasTopping only CheeseTopping or VegetableTopping'

Exercise 32: Convert 'VegetarianPizzaa' into defined class

Exercise 33-37: Create Closure Axioms on the 'hasTopping' property for subclasses of NamedPizza
------------------------------
	Right click the 'hasTopping some ****Topping' restriction and select 'Create closure axiom'.

Exercise 38: "Classify"

Exercise 39: Create a ValuePartition to represent the spiciness of pizza toppings
------------------------------
	1. Create a new class as a subclass of Thing called ValuePartition
	2. Create a subclass of ValuePartition called SpicinessValuePartition
	3. Create three subclasses of SpicinessValuePartition, name them Hot, Medium, and Mild
	4. Make Hot, Medium and Mild disjoint from each other
	5. Object Property Tab --> create a new ObjectProperty called 'hasSpiciness' --> range == SpicinessValuePartition && functional
	6. Equivalent classes --> Hot or Medium or Mild
